https://medium.freecodecamp.org/a-short-overview-of-object-oriented-software-design-c7aa0a622c83
Abstraction : Abstraction is the process of exposing only the relevant data to the users without showing unnecessary information
Polymorphism : I allows you to use an entity in multiple forms
Encapsulation : Prevents the data from unwanted access by binding of code and data in a single unit called object
Inheritance : Promotes the reusability of code and eliminates the use of redundant code.
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
1. abstraction:Abstraction is the idea of simplifying a concept to its bare essentials in some context. It allows you to better understand the concept by stripping it down to a simplified version.
 Abstraction is one of the OOP concepts. It is used to display only the essential features of the class and hides the unnecessary information.
The examples above illustrate abstraction — look at how the Fight class is structured. The way you use it is as simple as possible — you give it two heroes as arguments in instantiation and call the fight() method. Nothing more, nothing less.

Abstraction in your code should follow the rule of least surprise. Your abstraction should not surprise anybody with needless and unrelated behavior/properties. In other words — it should be intuitive.
abstraction reduces complexity by hiding unnecessary detail.
==============================================================================
2. encapsulation:Encapsulation can be thought of as putting something inside a capsule.In most languages, this is done through the so-called access modifiers (private, protected, and so on). 
-------------------------------------------------------------------------------
3. polymorphism: something occurs in several different forms. static or compile-time and dynamic.
    static: implement multiple methods within the same class that use the same name but a different set of parameters. 
    That is called method      overloading and represents a static form of polymorphism.
    
    Dynamic polymorphism: This form of polymorphism doesn’t allow the compiler to determine the executed method. Within an inheritance
    hierarchy, a subclass can override a method of its superclass. That enables the developer of the subclass to customize or 
    completely replace the behavior of that method.
    
    code: https://csharp-station.com/Tutorial/CSharp/Lesson09

It also creates a form of polymorphism. Both methods, implemented by the super- and subclass, share the same name and parameters but provide different functionality.

3.1 Inheritance:
============================================================================
4. aggregation:Defines a weak “has-a” relationship between a whole and its parts. Considered weak, because the parts can exist without the whole.
Example: HeroInventory and Item. 
A HeroInventory can have many Items and an Item can belong to any HeroInventory(such as trading items).
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5. composition:A strong “has-a” relationship where the whole and the part cannot exist without each other. The parts cannot be shared, as the whole depends on those exact parts.
---------------------------------------------------------
6. association:  Defines a loose relationship between two components. Both components do not depend on one another but may work together.
   Example: Hero and a Zone object.
-----------------------------------------------------------
7. Generalization:
Generalization might be the most important design principle — it is the process of extracting shared characteristics and combining them in one place. All of us know about the concept of functions and class inheritance —both are a kind of generalization.

A comparison might clear things up: while abstraction reduces complexity by hiding unnecessary detail, generalization reduces complexity by replacing multiple entities which perform similar functions with a single construct.
------------------------------------------------------------------------------------------
8. Decomposition
Decomposition is the action of splitting an object into multiple separate smaller parts. Said parts are easier to understand, maintain and program.
----------------------------------
9. 

10. protected vs protected internal (see screnshot "accessmodifier.img")
===================================================================questpond=================================================
What is abstract class ?  concrete class (non abstract class).
Abstract class is a base class or a parent class. Abstract classes can  have empty abstract methods or it can have implemented methods which can be overridden by child classes. 

What are interfaces?
Interface is a contract class with empty methods , properties and functions. Any class which implements the interface has to compulsory implement all the empty methods , functions and properties of the interface.

What's the difference between abstract class and interface?
There are many differences, below are some key two differences :-

Abstract class are base class or parent class while interfaces are contracts.
Abstract class can have some implemented methods and functions while interfaces methods and functions are completely empty.
Abstract classes are inherited while interfaces are implemented.
Abstract classes are used when we want to increase reusability in inheritance while interfaces are used to force a contract.

Can we create a object of abstract class or interface?
No we can not.

In what scenarios will you use a abstract class and in what scenarios will you use a  interface?

If you want to increase reusability in inheritance then abstract classes are good. If you want implement or force some methods across
classes must be for uniformity you can use a interface. So to increase  reusability via inheritance use abstract class as it is nothing
but a base class and to force methods use interfaces.

what is the diff between virtual vs abstract?
Virtual methods have an implementation and provide the derived classes with the option of overriding it. Abstract methods do not provide
an implementation and force the derived classes to override the method. So, abstract methods have no actual code in them, and subclasses
HAVE TO override the method. A virtual function, is basically saying look, here's the functionality that may or may not be good enough
for the child class, child class not necessary to override. So if it is good enough, use this method, if not, then override me, and
provide your own functionality.
https://www.youtube.com/watch?v=okG3cHgFeak
=============================================================================================================================
Static Constructor? Static constructor is used to initialize static data of a class. Compiler calls the static constructor before the
first instance is created.No access specifier is required to define it; You can not pass parameters to static constructor; A class can
have only one static constructor; It can access only static members of class; It is invoked only once, when the program execution begins
==============================================================================================================================
Public;Private;Protected;Internal;Protected internal
=========================================================
Delegate ? Delegates are type safe function pointer. It holds reference to a function.
Indexer? An Indexer is a member that enables an object to be indexed like Arrays.
sealed? disable inheritance,on a class or a method. When used on a method, derived classes can’t override the method.
Class and Structure? see screen shot
--------------------------
clone? Shallow copy(memberwisecloning) || Deep copy(serialize and deserialize): classes to be cloned must be flagged as [Serializable]
Array.CopyTo() vs Array.Clone() : => both shallow copy. copyto on existing and clone on brand new array; in clone can assign new value which will reflect only one not both.
=========================
func : return , Action : void, Predicate : bool
Action is a delegate (pointer) to a method, that takes zero, one or more input parameters, but does not return anything.
Func is a delegate (pointer) to a method, that takes zero, one or more input parameters, and returns a value (or reference).
Predicate is a special kind of Func often used for comparisons. Predicate is a function pointer for method which returns boolean value. They are commonly used for iterating a collection or to verify if the value does already exist.
Predicate can be used with method, anonymous and lambda expression.
==================================================================================================================================
What is a Destructor in C#?
Ans: A Destructor is used to clean up the memory and free the resources. But in C# this is done by the garbage collector on its own.
System.GC.Collect() is called internally for cleaning up. But sometimes it may be necessary to implement destructors manually.
==================================================================================================================================
yeild? The yield keyword performs custom and stateful iteration and returns each element of a collection one at a time with out the need
of creating temporary collections      =>>>https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/
==================================================================================================================================

==================================================================================================================================
